#include <iostream>
#include <fstream>
#include <string>
using namespace std;


class OfertaTuristica {
private:
    string numeOferta;
    string destinatie;
    float pret;
    string data_inceput;
    string data_sfarsit;
    int locuri_disponibile;
    static int contorOferte;
    string* descriere;

public:
    // Constructor cu toti parametrii
    OfertaTuristica(string nume, string destinatie, float pret, string data_inceput, string data_sfarsit, int locuri_disponibile, const string& descriere)
        : numeOferta(nume), destinatie(destinatie), pret(pret), data_inceput(data_inceput), data_sfarsit(data_sfarsit), locuri_disponibile(locuri_disponibile) {
        this->descriere = new string(descriere);
        contorOferte++;  // incrementare la fiecare creare de obiect
    }

    // Constructor cu nume si destinatie
    OfertaTuristica(string nume, string destinatie)
        : numeOferta("Oferta Vacanta") {
        this->numeOferta = nume;
        this->destinatie = destinatie;
        this->pret = 0.0;
        this->data_inceput = "";
        this->data_sfarsit = "";
        this->locuri_disponibile = 0;
        this->descriere = new string("N/A");
        contorOferte++;
    }

    // Constructor fara parametri
    OfertaTuristica()
        : numeOferta("Oferta Vacanta") {
        numeOferta = "";
        destinatie = "";
        pret = 0.0;
        data_inceput = "";
        data_sfarsit = "";
        locuri_disponibile = 0;
        this->descriere = new string("N/A");
        contorOferte++;
    }

    // Destructor
    ~OfertaTuristica() {
        delete descriere;
        contorOferte--;
    }

    // Constructor de copiere
    OfertaTuristica(const OfertaTuristica& other)
        : numeOferta(other.numeOferta), destinatie(other.destinatie),
        pret(other.pret), data_inceput(other.data_inceput),
        data_sfarsit(other.data_sfarsit), locuri_disponibile(other.locuri_disponibile) {
        this->descriere = new string(*other.descriere);
        contorOferte++;
    }

    //Get-eri & Set-eri
    string GetNumeOferta() {
        return numeOferta;
    }
    float GetPret() {
        return pret;
    }
    string GetDestinatie() {
        return this->destinatie;
    }
    string GetDataInceput() {
        return this->data_inceput;
    }
    string GetDataSfarsit() {
        return this->data_sfarsit;
    }
    int GetLocuriDisponibile() {
        return this->locuri_disponibile;
    }
    const string* GetDescriere() {
        return this->descriere;
    }
    int GetContorOferte(int contorOferte) {
        return this->contorOferte;
    }

    void SetNumeOferta(string& nume) {
        this->numeOferta = nume;
    }
    void SetDestinatie(string& destinatie) {
        this->destinatie = destinatie;
    }
    void SetPret(float pret) {
        this->pret = pret;
    }
    void SetDataInceput(string& data_inceput) {
        this->data_inceput = data_inceput;
    }
    void SetDataSfarsit(string& data_sfarsit) {
        this->data_sfarsit = data_sfarsit;
    }
    void SetLocuriDisponibile(int locuri_disponibile) {
        this->locuri_disponibile = locuri_disponibile;
    }
    void SetDescriere(const string& descriere) {
        this->descriere = new string(descriere);
    }

    // Functie de afisare in interiorul clasei
    void AfiseazaDetalii() {
        cout << "Nume oferta: " << numeOferta << endl;
        cout << "Destinatie: " << destinatie << endl;
        cout << "Pret: " << pret << endl;
        cout << "Data de inceput:" << data_inceput << endl;
        cout << "Data de sfarsit:" << data_sfarsit << endl;
        cout << "Locuri disponibile:" << locuri_disponibile << endl;
    }

    friend void ProcOferta(OfertaTuristica& oferta);

    // Supraincarcare operator de atribuire (=) pentru OfertaTuristica
    OfertaTuristica& operator=(const OfertaTuristica& other) {
        if (this != &other) {
            delete descriere;  // Elibereaza memoria pentru descriere existenta
            numeOferta = other.numeOferta;
            destinatie = other.destinatie;
            pret = other.pret;
            data_inceput = other.data_inceput;
            data_sfarsit = other.data_sfarsit;
            locuri_disponibile = other.locuri_disponibile;
            descriere = new string(*other.descriere);  // Alocare memorie pentru o noua descriere
        }
        return *this;
    }

    // Supraincarcare operator de incrementare (++)
    OfertaTuristica& operator++() {
        // CreÈ™te numarul de locuri disponibile cu 1
        locuri_disponibile++;
        return *this;
    }

    // Supraincarcare operator de afisare (<<) pentru OfertaTuristica
    friend ostream& operator<<(ostream& output, const OfertaTuristica& oferta) {
        output << "Nume oferta: " << oferta.numeOferta << endl;
        output << "Destinatie: " << oferta.destinatie << endl;
        output << "Pret: " << oferta.pret << endl;
        output << "Data de inceput: " << oferta.data_inceput << endl;
        output << "Data de sfarsit: " << oferta.data_sfarsit << endl;
        output << "Locuri disponibile: " << oferta.locuri_disponibile << endl;
        output << "Descriere: " << *oferta.descriere << endl;
        return output;
    }

    bool operator==(const OfertaTuristica& other) const {
        // Comparam toate atributele pentru a determina daca doua oferte sunt egale
        return (
            numeOferta == other.numeOferta &&
            destinatie == other.destinatie &&
            pret == other.pret &&
            data_inceput == other.data_inceput &&
            data_sfarsit == other.data_sfarsit &&
            locuri_disponibile == other.locuri_disponibile &&
            *descriere == *other.descriere
            );
    }

    // Metoda pentru scrierea unei oferte intr-un fisier text
    void ScrieInFisierText(const string& numeFisier) const {
        ofstream fout(numeFisier);
        if (fout.is_open()) {
            fout << "Nume oferta: " << numeOferta << endl;
            fout << "Destinatie: " << destinatie << endl;
            fout << "Pret: " << pret << endl;
            fout << "Data de inceput: " << data_inceput << endl;
            fout << "Data de sfarsit: " << data_sfarsit << endl;
            fout << "Locuri disponibile: " << locuri_disponibile << endl;
            fout << "Descriere: " << *descriere << endl;
            fout.close();
            cout << "Oferta a fost scrisa in fisierul text." << endl;
        }
        else {
            cout << "Eroare la deschiderea fisierului text pentru scriere." << endl;
        }
    }

    // Metoda pentru scrierea unei oferte intr-un fisier binar
    void ScrieInFisierBinar(const string& numeFisier) const {
        ofstream fout(numeFisier, ios::binary);
        if (fout.is_open()) {
            fout.write(reinterpret_cast<const char*>(&contorOferte), sizeof(contorOferte));
            fout.write(numeOferta.c_str(), numeOferta.size() + 1);
            fout.write(destinatie.c_str(), destinatie.size() + 1);
            fout.write(reinterpret_cast<const char*>(&pret), sizeof(pret));
            fout.write(data_inceput.c_str(), data_inceput.size() + 1);
            fout.write(data_sfarsit.c_str(), data_sfarsit.size() + 1);
            fout.write(reinterpret_cast<const char*>(&locuri_disponibile), sizeof(locuri_disponibile));
            int dimensiuneDescriere = descriere->size() + 1;
            fout.write(reinterpret_cast<const char*>(&dimensiuneDescriere), sizeof(dimensiuneDescriere));
            fout.write(descriere->c_str(), dimensiuneDescriere);
            fout.close();
            cout << "Oferta a fost scrisa in fisierul binar." << endl;
        }
        else {
            cout << "Eroare la deschiderea fisierului binar pentru scriere." << endl;
        }
    }
};
int OfertaTuristica::contorOferte = 0;

class AgentieTurism {
public:
    string numeAgentie;
    string adresa;
    string telefon;
    OfertaTuristica* oferte_turistice;
    const int numarMaximOferte = 100;
    static int numarAgentii;
    const string* descriereAgentie;

    // Constructor cu toti parametrii
    AgentieTurism(string nume, string adresa, string telefon, const string& descriereAgentie)
        : numeAgentie(nume), adresa(adresa), telefon(telefon) {
        this->oferte_turistice = new OfertaTuristica[numarMaximOferte];
        this->descriereAgentie = new string(descriereAgentie);
        numarAgentii++;  // incrementare la fiecare creare de obiect
    }

    // Constructor cu nume si adresa
    AgentieTurism(string nume, string adresa) : numeAgentie(nume), adresa(adresa), telefon(""), descriereAgentie(new string("N/A")) {
        this->oferte_turistice = new OfertaTuristica[numarMaximOferte];
        numarAgentii++;
    }

    // Constructor fara parametri
    AgentieTurism() : numeAgentie("Agentia de Turism TREI"), adresa(""), telefon(""), descriereAgentie(new string("N/A")) {
        oferte_turistice = new OfertaTuristica[numarMaximOferte];
        numarAgentii++;
    }

    // Destructor
    ~AgentieTurism() {
        delete[] oferte_turistice;
        delete descriereAgentie;
        numarAgentii--;
    }

    // Constructor de copiere
    AgentieTurism(const AgentieTurism& other)
        : numeAgentie(other.numeAgentie), adresa(other.adresa),
        telefon(other.telefon), descriereAgentie(new string(*other.descriereAgentie)) {
        oferte_turistice = new OfertaTuristica[numarMaximOferte];
        for (int i = 0; i < numarMaximOferte; ++i) {
            oferte_turistice[i] = other.oferte_turistice[i];
        }
        numarAgentii++;
    }

    //Get-eri & Set-eri
    string GetNumeAgentie() {
        return this->numeAgentie;
    }
    string GetAdresa() {
        return this->adresa;
    }
    string GetTelefon() {
        return this->telefon;
    }
    OfertaTuristica* GetOferteTuristice() {
        return this->oferte_turistice;
    }
    const string* GetDescriereAgentie() {
        return this->descriereAgentie;
    }
    static int GetNumarAgentii() {
        return numarAgentii;
    }

    void SetNumeAgentie(string& nume) {
        this->numeAgentie = numeAgentie;
    }
    void SetAdresa(string& adresa) {
        this->adresa = adresa;
    }
    void SetTelefon(string& telefon) {
        this->telefon = telefon;
    }
    void SetDescriereAgentie(string& descriereAgentie) {
        this->descriereAgentie = new string(descriereAgentie);
    }

    // Functie de afisare in interiorul clasei
    void AfiseazaDetalii() {
        cout << "Nume agentie: " << numeAgentie << endl;
        cout << "Adresa: " << adresa << endl;
        cout << "Telefon: " << telefon << endl;
    }

    // Supraincarcare operator de atribuire (=) pentru AgentieTurism
    AgentieTurism& operator=(const AgentieTurism& other) {
        if (this != &other) {
            numeAgentie = other.numeAgentie;
            adresa = other.adresa;
            telefon = other.telefon;

            // Copiere descriereAgentie
            delete descriereAgentie;
            descriereAgentie = new string(*other.descriereAgentie);

            // Copiere oferte_turistice
            delete[] oferte_turistice;
            oferte_turistice = new OfertaTuristica[numarMaximOferte];
            for (int i = 0; i < numarMaximOferte; ++i) {
                oferte_turistice[i] = other.oferte_turistice[i];
            }
        }
        return *this;
    }

    // Supraincarcare operator de egalitate (==) pentru AgentieTurism
    bool operator==(const AgentieTurism& other) const {
        return numeAgentie == other.numeAgentie && adresa == other.adresa && telefon == other.telefon &&
            *descriereAgentie == *other.descriereAgentie;
    }

    // Supraincarcare operator de adunare (+) pentru AgentieTurism
    AgentieTurism operator+(const AgentieTurism& other) const {
        AgentieTurism result = *this; // Constructor de copiere
        result.telefon += other.telefon;
        return result;
    }

    static bool AreNumeSpecial(AgentieTurism& agentie) {
        // Consideram ca orice agentie cu numele "Travel World" are un nume special
        return agentie.numeAgentie == "Travel World";
    }
};
int AgentieTurism::numarAgentii = 0;

class Rezervare {
private:
    const string nume;
    string destinatie;
    string data;
    int numar_adulti;
    int numar_copii;
    string* descriereRezervare;
    const string numeRezervare;
    static int contorRezervari;

public:

    // Constructor cu toti parametrii (folosind lista de initializare)
    Rezervare(string nume, string destinatie, string data, int numar_adulti, int numar_copii)
        : nume(nume), numeRezervare("Rezervare vacanta") {
        this->destinatie = destinatie;
        this->data = data;
        this->numar_adulti = numar_adulti;
        this->numar_copii = numar_copii;
        this->descriereRezervare = new string("Rezervare confirmata!");
        contorRezervari++;
    }

    // Constructor cu nume si destinatie
    Rezervare(string nume, string destinatie)
        : nume(nume), numeRezervare("Rezervare Vacanta") {
        this->destinatie = destinatie;
        this->data = "";
        this->numar_adulti = 0;
        this->numar_copii = 0;
        this->descriereRezervare = new string("N/A");
        contorRezervari++;
    }

    // Constructor fara parametri (atributele constante sunt deja initializate)
    Rezervare()
        : nume(""), numeRezervare("Rezervare Vacanta") {
        destinatie = "";
        data = "";
        numar_adulti = 0;
        numar_copii = 0;
        this->descriereRezervare = new string("N/A");
        contorRezervari++;
    }

    // Destructor
    ~Rezervare() {
        delete descriereRezervare;
        contorRezervari--;
    }

    //Functie de afisare
    void AfiseazaDetalii() {
        cout << "Nume rezervare: " << nume << endl;
        cout << "Destinatie: " << destinatie << endl;
        cout << "Data: " << data << endl;
        cout << "Numar adulti: " << numar_adulti << endl;
        cout << "Numar copii: " << numar_copii << endl;
    }

    //Get-eri & Set-eri
    string GetNume() {
        return this->nume;
    }
    string GetDestinatie() {
        return this->destinatie;
    }
    string GetData() {
        return this->data;
    }
    int GetNumarAdulti() {
        return this->numar_adulti;
    }
    int GetNumarCopii() {
        return this->numar_copii;
    }
    string* GetDescriereRezervare() {
        return this->descriereRezervare;
    }
    string GetNumeRezervare() {
        return this->numeRezervare;
    }
    static int GetContorRezervari() {
        return contorRezervari;
    }

    void SetDestinatie(string& destinatie) {
        this->destinatie = destinatie;
    }
    void SetData(string& data) {
        this->data = data;
    }
    void SetNumarAdulti(int numar_adulti) {
        this->numar_adulti = numar_adulti;
    }
    void SetNumarCopii(int numar_copii) {
        this->numar_copii = numar_copii;
    }
    void SetDescriereRezervare(string& descriereRezervare) {
        this->descriereRezervare = new string(descriereRezervare);
    }

    static void ProcesareRezervare(Rezervare& rezervare) {
        // Exemplu de prelucrare: consideram ca procesam rezervarile cu un numar impar de adulti
        if (rezervare.numar_adulti % 2 != 0) {
            cout << "Rezervare procesata cu succes!" << endl;
        }
        else {
            cout << "Rezervare nevalida pentru procesare!" << endl;
        }
    }

    friend void ProcRezervare(Rezervare& rezervare);

    // Supraincarcare operator de atribuire (=) pentru Rezervare
    Rezervare& operator=(const Rezervare& other) {
        if (this != &other) {
            destinatie = other.destinatie;
            data = other.data;
            numar_adulti = other.numar_adulti;
            numar_copii = other.numar_copii;

            // Copiere descriereRezervare
            delete descriereRezervare;
            descriereRezervare = new string(*other.descriereRezervare);
        }
        return *this;
    }

    // Supraincarcare operator de egalitate (==) pentru Rezervare
    bool operator==(const Rezervare& other) const {
        return destinatie == other.destinatie && data == other.data && numar_adulti == other.numar_adulti &&
            numar_copii == other.numar_copii && *descriereRezervare == *other.descriereRezervare;
    }

    // Supraincarcare operator de adunare (+) pentru Rezervare
    Rezervare operator+(const Rezervare& other) const {
        Rezervare result = *this;
        result.numar_adulti += other.numar_adulti;
        result.numar_copii += other.numar_copii;
        return result;
    }

    void ScrieInFisierText(const string& numeFisier) const {
        ofstream fout(numeFisier);
        if (fout.is_open()) {
            fout << "Nume rezervare: " << nume << endl;
            fout << "Destinatie: " << destinatie << endl;
            fout << "Data: " << data << endl;
            fout << "Numar adulti: " << numar_adulti << endl;
            fout << "Numar copii: " << numar_copii << endl;
            fout << "Descriere rezervare: " << *descriereRezervare << endl;
            fout.close();
            cout << "Rezervarea a fost scrisa in fisierul text." << endl;
        }
        else {
            cout << "Eroare la deschiderea fisierului text pentru scriere." << endl;
        }
    }

    // Metoda pentru scrierea unei rezervÄƒri Ã®ntr-un fiÈ™ier binar
    void ScrieInFisierBinar(const string& numeFisier) const {
        ofstream fout(numeFisier, ios::binary);
        if (fout.is_open()) {
            fout.write(reinterpret_cast<const char*>(&contorRezervari), sizeof(contorRezervari));
            fout.write(nume.c_str(), nume.size() + 1);
            fout.write(destinatie.c_str(), destinatie.size() + 1);
            fout.write(data.c_str(), data.size() + 1);
            fout.write(reinterpret_cast<const char*>(&numar_adulti), sizeof(numar_adulti));
            fout.write(reinterpret_cast<const char*>(&numar_copii), sizeof(numar_copii));
            int dimensiuneDescriere = descriereRezervare->size() + 1;
            fout.write(reinterpret_cast<const char*>(&dimensiuneDescriere), sizeof(dimensiuneDescriere));
            fout.write(descriereRezervare->c_str(), dimensiuneDescriere);
            fout.close();
            cout << "Rezervarea a fost scrisa in fisierul binar." << endl;
        }
        else {
            cout << "Eroare la deschiderea fisierului binar pentru scriere." << endl;
        }
    }
};
int Rezervare::contorRezervari = 0;

class Turist {
private:
    string numeTurist;
    int varsta;
    OfertaTuristica ofertaPreferata;  // Relatia "has-a" cu clasa OfertaTuristica
    bool asigurareMedicala;

public:
    // Constructor cu toti parametrii
    Turist(string nume, int varsta, const OfertaTuristica& oferta, bool asigurare)
        : numeTurist(nume), varsta(varsta), ofertaPreferata(oferta), asigurareMedicala(asigurare) {}

    // Constructor de copiere
    Turist(const Turist& other)
        : numeTurist(other.numeTurist), varsta(other.varsta), ofertaPreferata(other.ofertaPreferata), asigurareMedicala(other.asigurareMedicala) {}

    // Destructor
    ~Turist() {
        cout << "Destructor pentru Turist: " << numeTurist << endl;
    }

    //Get-eri & Set-eri
    string GetNumeTurist() const {
        return numeTurist;
    }
    int GetVarsta() const {
        return varsta;
    }
    OfertaTuristica GetOfertaPreferata() const {
        return ofertaPreferata;
    }
    bool GetAsigurareMedicala() const {
        return asigurareMedicala;
    }
    void SetNumeTurist(const string& nume) {
        numeTurist = nume;
    }
    void SetVarsta(int v) {
        varsta = v;
    }
    void SetOfertaPreferata(const OfertaTuristica& oferta) {
        ofertaPreferata = oferta;
    }
    void SetAsigurareMedicala(bool asigurare) {
        asigurareMedicala = asigurare;
    }

    // Supraincarcare operator de atribuire (=) pentru Turist
    Turist& operator=(const Turist& other) {
        if (this != &other) {
            numeTurist = other.numeTurist;
            varsta = other.varsta;
            ofertaPreferata = other.ofertaPreferata;
            asigurareMedicala = other.asigurareMedicala;
        }
        return *this;
    }

    // Supraincarcare operator de egalitate (==) pentru Turist
    bool operator==(const Turist& other) const {
        return numeTurist == other.numeTurist && varsta == other.varsta &&
            ofertaPreferata == other.ofertaPreferata && asigurareMedicala == other.asigurareMedicala;
    }

    // Supraincarcare operator de afisare (<<) pentru Turist
    friend ostream& operator<<(ostream& output, const Turist& turist) {
        output << "Nume turist: " << turist.numeTurist << endl;
        output << "Varsta: " << turist.varsta << endl;
        output << "Oferta preferata:\n" << turist.ofertaPreferata;
        output << "Asigurare medicala: " << (turist.asigurareMedicala ? "Da" : "Nu") << endl;
        return output;
    }
};

class Excursie : public OfertaTuristica {
private:
    string ghid;
    int durata;

public:
    // Constructor cu toti parametrii
    Excursie(string nume, string destinatie, float pret, string data_inceput, string data_sfarsit, int locuri_disponibile, const string& descriere, string ghid, int durata)
        : OfertaTuristica(nume, destinatie, pret, data_inceput, data_sfarsit, locuri_disponibile, descriere), ghid(ghid), durata(durata) {}

    // Metode specifice pentru Excursie
    string GetGhid() const {
        return ghid;
    }
    int GetDurata() const {
        return durata;
    }
    void SetGhid(const string& newGhid) {
        ghid = newGhid;
    }
    void SetDurata(int newDurata) {
        durata = newDurata;
    }

    void AfiseazaDetalii() {
        OfertaTuristica::AfiseazaDetalii();  // Apeleaza metoda din clasa de baza
        cout << "Ghid: " << ghid << endl;
        cout << "Durata: " << durata << " zile" << endl;
    }
};

class PachetTuristic : public Rezervare {
private:
    string tip_transport;
    bool asigurare_calatorie;

public:
    // Constructor cu toti parametrii
    PachetTuristic(string nume, string destinatie, string data, int numar_adulti, int numar_copii, const string& tip_transport, bool asigurare_calatorie)
        : Rezervare(nume, destinatie, data, numar_adulti, numar_copii), tip_transport(tip_transport), asigurare_calatorie(asigurare_calatorie) {}

    // Metode specifice pentru PachetTuristic
    string GetTipTransport() const {
        return tip_transport;
    }
    bool GetAsigurareCalatorie() const {
        return asigurare_calatorie;
    }
    void SetTipTransport(const string& newTipTransport) {
        tip_transport = newTipTransport;
    }
    void SetAsigurareCalatorie(bool newAsigurareCalatorie) {
        asigurare_calatorie = newAsigurareCalatorie;
    }

    void AfiseazaDetalii() {
        Rezervare::AfiseazaDetalii();  // Apeleaza metoda din clasa de baza
        cout << "Tip transport: " << tip_transport << endl;
        cout << "Asigurare calatorie: " << (asigurare_calatorie ? "Da" : "Nu") << endl;
    }
};

// Definirea functiei pentru afisarea informatiilor despre oferte
void AfisareInformatii(OfertaTuristica& oferta) {
    cout << "Detalii despre oferta turistica:" << endl;
    cout << "Nume oferta: " << oferta.GetNumeOferta() << endl;
    cout << "Pret: " << oferta.GetPret() << endl;
    cout << "Descriere: " << *(oferta.GetDescriere()) << endl;
    cout << endl;
}

// Definirea functiei pentru afisarea informatiilor despre rezervari
void AfisareInformatii(Rezervare& rezervare) {
    cout << "Detalii despre rezervare:" << endl;
    cout << "Nume: " << rezervare.GetNume() << endl;
    cout << "Destinatie: " << rezervare.GetDestinatie() << endl;
    cout << "Descriere rezervare: " << *(rezervare.GetDescriereRezervare()) << endl;
    cout << endl;
}

// Definirea functiei globale pentru prelucrarea ofertelor turistice
void ProcOferta(OfertaTuristica& oferta) {
    // Exemplu de prelucrare: consideram ca procesam ofertele cu un pret mai mare de 1000
    if (oferta.pret > 1000.0) {
        cout << "Oferta procesata cu succes!" << endl;
    }
    else {
        cout << "Oferta nevalida pentru procesare!" << endl;
    }
}

// Definirea functiei globale pentru prelucrarea rezervarilor
void ProcRezervare(Rezervare& rezervare) {
    // Exemplu de prelucrare: consideram ca procesam rezervarile cu un numar impar de adulti
    if (rezervare.numar_adulti % 2 != 0) {
        cout << "Rezervare procesata cu succes!" << endl;
    }
    else {
        cout << "Rezervare nevalida pentru procesare!" << endl;
    }
}

int main() {
    // OfertaTuristica
    OfertaTuristica oferta1("Vacanta la mare", "Mamaia", 800.0, "2023-07-15", "2023-07-22", 50, "O saptamana de relaxare la malul marii.");
    oferta1.AfiseazaDetalii();
    cout << endl;
    OfertaTuristica oferta2("City break", "Paris");
    oferta2.AfiseazaDetalii();
    cout << endl;
    OfertaTuristica oferta3;
    oferta3.AfiseazaDetalii();
    cout << endl;

    // AgentieTurism
    AgentieTurism agentie1("Travel World", "Strada Turistica, Nr. 123", "+400775892165", "Agentie de turism specializata in vacante exotice.");
    agentie1.AfiseazaDetalii();
    cout << endl;
    AgentieTurism agentie2("Adventure Tours", "Strada Aventurii, Nr. 456", "", "Agentie de turism pentru pasionatii de aventuri.");
    agentie2.AfiseazaDetalii();
    cout << endl;
    AgentieTurism agentie3;
    agentie3.AfiseazaDetalii();
    cout << endl;

    // Rezervari
    Rezervare rezervare1("Vasile Alexandru", "Mamaia", "2023-07-15", 2, 1);
    rezervare1.AfiseazaDetalii();
    cout << endl;
    Rezervare rezervare2("Ion Mihaela", "Londra");
    rezervare2.AfiseazaDetalii();
    cout << endl;
    Rezervare rezervare3;
    rezervare3.AfiseazaDetalii();
    cout << endl;

    //Constructori de copiere
    OfertaTuristica oferta4(oferta1);  // Apel constructor de copiere
    oferta4.AfiseazaDetalii();
    cout << endl;
    AgentieTurism agentie4(agentie1);  // Apel constructor de copiere
    agentie4.AfiseazaDetalii();
    cout << endl;
    Rezervare rezervare4(rezervare1);  // Apel constructor de copiere
    rezervare4.AfiseazaDetalii();
    cout << endl;

    cout << "Afisare utilizand functia globala" << endl;
    AfisareInformatii(oferta1);

    cout << endl;

    // Afisati informatii despre oferte
    cout << "Detalii oferte turistice:" << endl;
    cout << "-------------------------" << endl;
    cout << "Oferta 1:" << endl;
    cout << "Nume: " << oferta1.GetNumeOferta() << endl;
    cout << "Descriere: " << *oferta1.GetDescriere() << endl;
    cout << endl;
    cout << "Oferta 2:" << endl;
    cout << "Nume: " << oferta2.GetNumeOferta() << endl;
    cout << "Descriere: " << *oferta2.GetDescriere() << endl;

    cout << endl;

    // Afisati informatii despre agentii de turism
    cout << "Detalii agentii de turism:" << endl;
    cout << "---------------------------" << endl;
    cout << "Agentia 1:" << endl;
    cout << "Nume: " << agentie1.GetNumeAgentie() << endl;
    cout << "Descriere agentie: " << *agentie1.GetDescriereAgentie() << endl;
    cout << endl;
    cout << "Agentia 2:" << endl;
    cout << "Nume: " << agentie2.GetNumeAgentie() << endl;
    cout << "Descriere agentie: " << *agentie2.GetDescriereAgentie() << endl;

    // Afiseaza rezultatul verificarii numelui special pentru agentie
    if (AgentieTurism::AreNumeSpecial(agentie1)) {
        cout << "Agentia are un nume special!" << endl;
    }
    else {
        cout << "Agentia nu are un nume special." << endl;
    }

    cout << endl;

    // OfertaTuristica
    OfertaTuristica oferta5("Vacanta la mare", "Mamaia", 1200.0, "2023-07-15", "2023-07-22", 50, "O saptamana de relaxare la malul marii.");
    ProcOferta(oferta5);

    // Rezervari
    Rezervare rezervare5("Ion Mihaela", "Mamaia", "2023-07-15", 3, 1);
    ProcRezervare(rezervare5);

    cout << endl;

    //PENTRU OfertaTuristica
    // Operatorul de atribuire =
    OfertaTuristica ofertaNoua;
    ofertaNoua = oferta1;
    cout << "Oferta noua dupa atribuire:\n" << ofertaNoua << endl;
    cout << endl;

    // Utilizare operator de incrementare ++
    cout << "Locuri disponibile inainte de incrementare: " << oferta1.GetLocuriDisponibile() << endl;
    ++oferta1;  // Apel operator de incrementare
    cout << "Locuri disponibile dupa incrementare: " << oferta1.GetLocuriDisponibile() << endl;
    cout << endl;

    // Operatorul de afisare <<
    cout << "Detalii despre oferta4:\n" << oferta4 << endl;
    cout << endl;

    // Operatorul de egalitate ==
    if (oferta1 == oferta2) {
        cout << "Oferta1 si oferta2 sunt egale." << endl;
    }
    else {
        cout << "Oferta1 si oferta2 nu sunt egale." << endl;
    }
    cout << endl;

    //PENTRU AgentieTurism
    // Utilizare operator de atribuire pentru AgentieTurism
    AgentieTurism agentie5;
    agentie5 = agentie1; // Apel operator de atribuire
    cout << "Detalii AgentieTurism dupa atribuire:" << endl;
    agentie5.AfiseazaDetalii();
    cout << endl;

    // Utilizare operator de egalitate pentru AgentieTurism
    if (agentie1 == agentie2) {
        cout << "Agentiile au aceleasi informatii." << endl;
    }
    else {
        cout << "Agentiile nu au aceleasi informatii." << endl;
    }
    cout << endl;

    // Utilizare operator de adunare pentru AgentieTurism
    AgentieTurism agentie6 = agentie1 + agentie2;
    cout << "Detalii AgentieTurism dupa adunare:" << endl;
    agentie6.AfiseazaDetalii();
    cout << endl;

    //PENTRU Rezervari
    // Utilizare operator de atribuire pentru Rezervare
    Rezervare rezervare7;
    rezervare5 = rezervare1; // Apel operator de atribuire
    cout << "Detalii Rezervare dupa atribuire:" << endl;
    rezervare5.AfiseazaDetalii();
    cout << endl;

    // Utilizare operator de egalitate pentru Rezervare
    if (rezervare1 == rezervare2) {
        cout << "Rezervarile au aceleasi informatii." << endl;
    }
    else {
        cout << "Rezervarile nu au aceleasi informatii." << endl;
    }
    cout << endl;

    // Utilizare operator de adunare pentru Rezervare
    Rezervare rezervare6 = rezervare1 + rezervare2;
    cout << "Detalii Rezervare dupa adunare:" << endl;
    rezervare6.AfiseazaDetalii();
    cout << endl;

    Turist turist1("Ion Mihaela", 25, oferta1, true);
    Turist turist2("Vasile Alexandru", 30, oferta2, false);

    // Afisarea informatiilor despre turisti
    cout << "Informatii despre Ion Mihaela:\n" << turist1 << endl;
    cout << "Informatii despre Vasile Alexandru:\n" << turist2 << endl;

    // Utilizare metode pentru scrierea ofertelor si rezervarilor intr-un fisier text
    oferta1.ScrieInFisierText("oferta_text.txt");
    rezervare1.ScrieInFisierText("rezervare_text.txt");
    cout << endl;
    // Utilizare metode pentru scrierea ofertelor si rezervarilor intr-un fisier binar
    oferta1.ScrieInFisierBinar("oferta_binar.dat");
    rezervare1.ScrieInFisierBinar("rezervare_binar.bin");
    cout << endl;

    // Creare obiect de tip Excursie
    Excursie excursie1("Excursie Montana", "Muntii Carpati", 1200.0, "2023-08-10", "2023-08-15", 20, "Descoperiti frumusetea muntilor", "Ghid Montan", 5);
    excursie1.AfiseazaDetalii();
    cout << endl;

    // Creare obiect de tip PachetTuristic
    PachetTuristic pachet1("Pachet Litoral", "Mamaia", "2023-07-20", 2, 1, "Avion", true);
    pachet1.AfiseazaDetalii();
    cout << endl;

    // Upcasting
    OfertaTuristica* ofertaUpcast1 = &excursie1;
    Rezervare* rezervareUpcast2 = &pachet1;

    // Eliberare memorie alocata dinamic
    delete oferta1.GetDescriere();
    delete oferta2.GetDescriere();
    delete agentie1.GetDescriereAgentie();
    delete agentie2.GetDescriereAgentie();

    return 0;
}
